1. Tối ưu trong Smart contract Solidity : 
    - Tối ưu phí gas: 
    + Vì mặc định uint là sử dụng 256bit nên việc khai báo biến kiểu uint32 hay uint, 
    uint256 KHÔNG giúp giảm phí gas, chúng là như nhau, TUY NHIÊN trong STRUCT, 
    khi khởi tạo các uint32 cạnh nhau thì Solidity sẽ đóng gói các biến này lại vs nhau 
    để chiếm ít dung lượng hơn -> Khai báo uint32 cạnh nhau trong Struct
    + Chỉ cần gửi userId của người dùng trên smart contract, ko cần lưu tên hay các thông tin khác.
    + Sử dụng view function để tiết kiệm phí gas. View để SM biết function đó ko truy vấn data, chỉ để 
    lấy dữ liệu để xem, ko tạo node, nên ko tốn phí.

    - SỬ dụng SafeMath /32/16 cho từng loại uint để đề phòng trường hợp bị tràn dữ liệu hoặc dữ liệu âm.
    - Trong VD test basic, Hàm public tốn phí gas hơn gấp đôi so với hàm external. 
        + Bởi vì các hàm public có thể được gọi trong nội bộ hoặc bất kì đâu, nên hàm public cần ghi tất
    cả các đối số vào bộ nhớ. Các hàm inernal được thực hiện thông qua các bước nhảy trong code và các đối số 
    mảng được chuyển nội bộ bởi các con trỏ tới bộ nhớ. vì vậy nên internal mong đợi các đối số của nó đặt trong 
    bộ nhớ, và các đối số đó được public đưa vào bộ nhớ để internal sử dụng.
        + Đối với các function external, trình biên dịch không cần cho phép các lệnh gọi nội bộ và do đó, 
        nó cho phép các đối số được đọc trực tiếp từ calldata, tiết kiệm bước sao chép.

    - Function rand trong solidity. param truyền vào là amout số muốn lấy, ví dụ 100 thì là lấy 2 số : 
            function randMod(uint _modulus) internal returns(uint) {
                randNonce++;
                return uint(keccak256(abi.encodePacked(now, msg.sender, randNonce))) % _modulus;
            }

    -   function withdraw() external onlyOwner {
            address payable _owner = address(uint160(owner()));
            _owner.transfer(address(this).balance);
        }

